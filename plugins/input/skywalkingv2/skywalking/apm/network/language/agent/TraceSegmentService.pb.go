//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: language-agent/TraceSegmentService.proto

package agent

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TraceSegmentObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceSegmentId        *UniqueId     `protobuf:"bytes,1,opt,name=traceSegmentId,proto3" json:"traceSegmentId,omitempty"`
	Spans                 []*SpanObject `protobuf:"bytes,2,rep,name=spans,proto3" json:"spans,omitempty"`
	ApplicationId         int32         `protobuf:"varint,3,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	ApplicationInstanceId int32         `protobuf:"varint,4,opt,name=applicationInstanceId,proto3" json:"applicationInstanceId,omitempty"`
	IsSizeLimited         bool          `protobuf:"varint,5,opt,name=isSizeLimited,proto3" json:"isSizeLimited,omitempty"`
}

func (x *TraceSegmentObject) Reset() {
	*x = TraceSegmentObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_language_agent_TraceSegmentService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceSegmentObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceSegmentObject) ProtoMessage() {}

func (x *TraceSegmentObject) ProtoReflect() protoreflect.Message {
	mi := &file_language_agent_TraceSegmentService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceSegmentObject.ProtoReflect.Descriptor instead.
func (*TraceSegmentObject) Descriptor() ([]byte, []int) {
	return file_language_agent_TraceSegmentService_proto_rawDescGZIP(), []int{0}
}

func (x *TraceSegmentObject) GetTraceSegmentId() *UniqueId {
	if x != nil {
		return x.TraceSegmentId
	}
	return nil
}

func (x *TraceSegmentObject) GetSpans() []*SpanObject {
	if x != nil {
		return x.Spans
	}
	return nil
}

func (x *TraceSegmentObject) GetApplicationId() int32 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

func (x *TraceSegmentObject) GetApplicationInstanceId() int32 {
	if x != nil {
		return x.ApplicationInstanceId
	}
	return 0
}

func (x *TraceSegmentObject) GetIsSizeLimited() bool {
	if x != nil {
		return x.IsSizeLimited
	}
	return false
}

type TraceSegmentReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefType                     RefType   `protobuf:"varint,1,opt,name=refType,proto3,enum=RefType" json:"refType,omitempty"`
	ParentTraceSegmentId        *UniqueId `protobuf:"bytes,2,opt,name=parentTraceSegmentId,proto3" json:"parentTraceSegmentId,omitempty"`
	ParentSpanId                int32     `protobuf:"varint,3,opt,name=parentSpanId,proto3" json:"parentSpanId,omitempty"`
	ParentApplicationInstanceId int32     `protobuf:"varint,4,opt,name=parentApplicationInstanceId,proto3" json:"parentApplicationInstanceId,omitempty"`
	NetworkAddress              string    `protobuf:"bytes,5,opt,name=networkAddress,proto3" json:"networkAddress,omitempty"`
	NetworkAddressId            int32     `protobuf:"varint,6,opt,name=networkAddressId,proto3" json:"networkAddressId,omitempty"`
	EntryApplicationInstanceId  int32     `protobuf:"varint,7,opt,name=entryApplicationInstanceId,proto3" json:"entryApplicationInstanceId,omitempty"`
	EntryServiceName            string    `protobuf:"bytes,8,opt,name=entryServiceName,proto3" json:"entryServiceName,omitempty"`
	EntryServiceId              int32     `protobuf:"varint,9,opt,name=entryServiceId,proto3" json:"entryServiceId,omitempty"`
	ParentServiceName           string    `protobuf:"bytes,10,opt,name=parentServiceName,proto3" json:"parentServiceName,omitempty"`
	ParentServiceId             int32     `protobuf:"varint,11,opt,name=parentServiceId,proto3" json:"parentServiceId,omitempty"`
}

func (x *TraceSegmentReference) Reset() {
	*x = TraceSegmentReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_language_agent_TraceSegmentService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceSegmentReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceSegmentReference) ProtoMessage() {}

func (x *TraceSegmentReference) ProtoReflect() protoreflect.Message {
	mi := &file_language_agent_TraceSegmentService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceSegmentReference.ProtoReflect.Descriptor instead.
func (*TraceSegmentReference) Descriptor() ([]byte, []int) {
	return file_language_agent_TraceSegmentService_proto_rawDescGZIP(), []int{1}
}

func (x *TraceSegmentReference) GetRefType() RefType {
	if x != nil {
		return x.RefType
	}
	return RefType_CrossProcess
}

func (x *TraceSegmentReference) GetParentTraceSegmentId() *UniqueId {
	if x != nil {
		return x.ParentTraceSegmentId
	}
	return nil
}

func (x *TraceSegmentReference) GetParentSpanId() int32 {
	if x != nil {
		return x.ParentSpanId
	}
	return 0
}

func (x *TraceSegmentReference) GetParentApplicationInstanceId() int32 {
	if x != nil {
		return x.ParentApplicationInstanceId
	}
	return 0
}

func (x *TraceSegmentReference) GetNetworkAddress() string {
	if x != nil {
		return x.NetworkAddress
	}
	return ""
}

func (x *TraceSegmentReference) GetNetworkAddressId() int32 {
	if x != nil {
		return x.NetworkAddressId
	}
	return 0
}

func (x *TraceSegmentReference) GetEntryApplicationInstanceId() int32 {
	if x != nil {
		return x.EntryApplicationInstanceId
	}
	return 0
}

func (x *TraceSegmentReference) GetEntryServiceName() string {
	if x != nil {
		return x.EntryServiceName
	}
	return ""
}

func (x *TraceSegmentReference) GetEntryServiceId() int32 {
	if x != nil {
		return x.EntryServiceId
	}
	return 0
}

func (x *TraceSegmentReference) GetParentServiceName() string {
	if x != nil {
		return x.ParentServiceName
	}
	return ""
}

func (x *TraceSegmentReference) GetParentServiceId() int32 {
	if x != nil {
		return x.ParentServiceId
	}
	return 0
}

type SpanObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanId          int32                    `protobuf:"varint,1,opt,name=spanId,proto3" json:"spanId,omitempty"`
	ParentSpanId    int32                    `protobuf:"varint,2,opt,name=parentSpanId,proto3" json:"parentSpanId,omitempty"`
	StartTime       int64                    `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime         int64                    `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Refs            []*TraceSegmentReference `protobuf:"bytes,5,rep,name=refs,proto3" json:"refs,omitempty"`
	OperationNameId int32                    `protobuf:"varint,6,opt,name=operationNameId,proto3" json:"operationNameId,omitempty"`
	OperationName   string                   `protobuf:"bytes,7,opt,name=operationName,proto3" json:"operationName,omitempty"`
	PeerId          int32                    `protobuf:"varint,8,opt,name=peerId,proto3" json:"peerId,omitempty"`
	Peer            string                   `protobuf:"bytes,9,opt,name=peer,proto3" json:"peer,omitempty"`
	SpanType        SpanType                 `protobuf:"varint,10,opt,name=spanType,proto3,enum=SpanType" json:"spanType,omitempty"`
	SpanLayer       SpanLayer                `protobuf:"varint,11,opt,name=spanLayer,proto3,enum=SpanLayer" json:"spanLayer,omitempty"`
	ComponentId     int32                    `protobuf:"varint,12,opt,name=componentId,proto3" json:"componentId,omitempty"`
	Component       string                   `protobuf:"bytes,13,opt,name=component,proto3" json:"component,omitempty"`
	IsError         bool                     `protobuf:"varint,14,opt,name=isError,proto3" json:"isError,omitempty"`
	Tags            []*KeyWithStringValue    `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	Logs            []*LogMessage            `protobuf:"bytes,16,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *SpanObject) Reset() {
	*x = SpanObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_language_agent_TraceSegmentService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanObject) ProtoMessage() {}

func (x *SpanObject) ProtoReflect() protoreflect.Message {
	mi := &file_language_agent_TraceSegmentService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanObject.ProtoReflect.Descriptor instead.
func (*SpanObject) Descriptor() ([]byte, []int) {
	return file_language_agent_TraceSegmentService_proto_rawDescGZIP(), []int{2}
}

func (x *SpanObject) GetSpanId() int32 {
	if x != nil {
		return x.SpanId
	}
	return 0
}

func (x *SpanObject) GetParentSpanId() int32 {
	if x != nil {
		return x.ParentSpanId
	}
	return 0
}

func (x *SpanObject) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SpanObject) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SpanObject) GetRefs() []*TraceSegmentReference {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *SpanObject) GetOperationNameId() int32 {
	if x != nil {
		return x.OperationNameId
	}
	return 0
}

func (x *SpanObject) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *SpanObject) GetPeerId() int32 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *SpanObject) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *SpanObject) GetSpanType() SpanType {
	if x != nil {
		return x.SpanType
	}
	return SpanType_Entry
}

func (x *SpanObject) GetSpanLayer() SpanLayer {
	if x != nil {
		return x.SpanLayer
	}
	return SpanLayer_Unknown
}

func (x *SpanObject) GetComponentId() int32 {
	if x != nil {
		return x.ComponentId
	}
	return 0
}

func (x *SpanObject) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *SpanObject) GetIsError() bool {
	if x != nil {
		return x.IsError
	}
	return false
}

func (x *SpanObject) GetTags() []*KeyWithStringValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SpanObject) GetLogs() []*LogMessage {
	if x != nil {
		return x.Logs
	}
	return nil
}

type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64                 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Data []*KeyWithStringValue `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_language_agent_TraceSegmentService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_language_agent_TraceSegmentService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_language_agent_TraceSegmentService_proto_rawDescGZIP(), []int{3}
}

func (x *LogMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *LogMessage) GetData() []*KeyWithStringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_language_agent_TraceSegmentService_proto protoreflect.FileDescriptor

var file_language_agent_TraceSegmentService_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2f, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x44, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x4b, 0x65, 0x79, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xec, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x70, 0x61,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x53, 0x69,
	0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x22, 0xa0,
	0x04, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x52, 0x65, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x14,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x64, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x1b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x9d, 0x04, 0x0a, 0x0a, 0x53, 0x70, 0x61, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x08,
	0x73, 0x70, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09,
	0x2e, 0x53, 0x70, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x22, 0x49, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x43, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x10,
	0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x1a, 0x0b, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x28,
	0x01, 0x42, 0xa1, 0x01, 0x0a, 0x30, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x01, 0x5a, 0x4e, 0x6c, 0x6f, 0x67, 0x74, 0x61, 0x69,
	0x6c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67,
	0x76, 0x32, 0x2f, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70,
	0x6d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0xaa, 0x02, 0x1a, 0x53, 0x6b, 0x79, 0x57, 0x61,
	0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_language_agent_TraceSegmentService_proto_rawDescOnce sync.Once
	file_language_agent_TraceSegmentService_proto_rawDescData = file_language_agent_TraceSegmentService_proto_rawDesc
)

func file_language_agent_TraceSegmentService_proto_rawDescGZIP() []byte {
	file_language_agent_TraceSegmentService_proto_rawDescOnce.Do(func() {
		file_language_agent_TraceSegmentService_proto_rawDescData = protoimpl.X.CompressGZIP(file_language_agent_TraceSegmentService_proto_rawDescData)
	})
	return file_language_agent_TraceSegmentService_proto_rawDescData
}

var file_language_agent_TraceSegmentService_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_language_agent_TraceSegmentService_proto_goTypes = []interface{}{
	(*TraceSegmentObject)(nil),    // 0: TraceSegmentObject
	(*TraceSegmentReference)(nil), // 1: TraceSegmentReference
	(*SpanObject)(nil),            // 2: SpanObject
	(*LogMessage)(nil),            // 3: LogMessage
	(*UniqueId)(nil),              // 4: UniqueId
	(RefType)(0),                  // 5: RefType
	(SpanType)(0),                 // 6: SpanType
	(SpanLayer)(0),                // 7: SpanLayer
	(*KeyWithStringValue)(nil),    // 8: KeyWithStringValue
	(*UpstreamSegment)(nil),       // 9: UpstreamSegment
	(*Downstream)(nil),            // 10: Downstream
}
var file_language_agent_TraceSegmentService_proto_depIdxs = []int32{
	4,  // 0: TraceSegmentObject.traceSegmentId:type_name -> UniqueId
	2,  // 1: TraceSegmentObject.spans:type_name -> SpanObject
	5,  // 2: TraceSegmentReference.refType:type_name -> RefType
	4,  // 3: TraceSegmentReference.parentTraceSegmentId:type_name -> UniqueId
	1,  // 4: SpanObject.refs:type_name -> TraceSegmentReference
	6,  // 5: SpanObject.spanType:type_name -> SpanType
	7,  // 6: SpanObject.spanLayer:type_name -> SpanLayer
	8,  // 7: SpanObject.tags:type_name -> KeyWithStringValue
	3,  // 8: SpanObject.logs:type_name -> LogMessage
	8,  // 9: LogMessage.data:type_name -> KeyWithStringValue
	9,  // 10: TraceSegmentService.collect:input_type -> UpstreamSegment
	10, // 11: TraceSegmentService.collect:output_type -> Downstream
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_language_agent_TraceSegmentService_proto_init() }
func file_language_agent_TraceSegmentService_proto_init() {
	if File_language_agent_TraceSegmentService_proto != nil {
		return
	}
	file_language_agent_Downstream_proto_init()
	file_language_agent_KeyWithStringValue_proto_init()
	file_common_trace_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_language_agent_TraceSegmentService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceSegmentObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_language_agent_TraceSegmentService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceSegmentReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_language_agent_TraceSegmentService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_language_agent_TraceSegmentService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_language_agent_TraceSegmentService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_language_agent_TraceSegmentService_proto_goTypes,
		DependencyIndexes: file_language_agent_TraceSegmentService_proto_depIdxs,
		MessageInfos:      file_language_agent_TraceSegmentService_proto_msgTypes,
	}.Build()
	File_language_agent_TraceSegmentService_proto = out.File
	file_language_agent_TraceSegmentService_proto_rawDesc = nil
	file_language_agent_TraceSegmentService_proto_goTypes = nil
	file_language_agent_TraceSegmentService_proto_depIdxs = nil
}
