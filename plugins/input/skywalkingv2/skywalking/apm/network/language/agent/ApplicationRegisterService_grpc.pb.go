// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationRegisterServiceClient is the client API for ApplicationRegisterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationRegisterServiceClient interface {
	ApplicationCodeRegister(ctx context.Context, in *Application, opts ...grpc.CallOption) (*ApplicationMapping, error)
}

type applicationRegisterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationRegisterServiceClient(cc grpc.ClientConnInterface) ApplicationRegisterServiceClient {
	return &applicationRegisterServiceClient{cc}
}

func (c *applicationRegisterServiceClient) ApplicationCodeRegister(ctx context.Context, in *Application, opts ...grpc.CallOption) (*ApplicationMapping, error) {
	out := new(ApplicationMapping)
	err := c.cc.Invoke(ctx, "/ApplicationRegisterService/applicationCodeRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationRegisterServiceServer is the server API for ApplicationRegisterService service.
// All implementations should embed UnimplementedApplicationRegisterServiceServer
// for forward compatibility
type ApplicationRegisterServiceServer interface {
	ApplicationCodeRegister(context.Context, *Application) (*ApplicationMapping, error)
}

// UnimplementedApplicationRegisterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApplicationRegisterServiceServer struct {
}

func (UnimplementedApplicationRegisterServiceServer) ApplicationCodeRegister(context.Context, *Application) (*ApplicationMapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationCodeRegister not implemented")
}

// UnsafeApplicationRegisterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationRegisterServiceServer will
// result in compilation errors.
type UnsafeApplicationRegisterServiceServer interface {
	mustEmbedUnimplementedApplicationRegisterServiceServer()
}

func RegisterApplicationRegisterServiceServer(s grpc.ServiceRegistrar, srv ApplicationRegisterServiceServer) {
	s.RegisterService(&ApplicationRegisterService_ServiceDesc, srv)
}

func _ApplicationRegisterService_ApplicationCodeRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRegisterServiceServer).ApplicationCodeRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ApplicationRegisterService/applicationCodeRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRegisterServiceServer).ApplicationCodeRegister(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationRegisterService_ServiceDesc is the grpc.ServiceDesc for ApplicationRegisterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationRegisterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ApplicationRegisterService",
	HandlerType: (*ApplicationRegisterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "applicationCodeRegister",
			Handler:    _ApplicationRegisterService_ApplicationCodeRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "language-agent/ApplicationRegisterService.proto",
}
