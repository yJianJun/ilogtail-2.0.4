// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkAddressRegisterServiceClient is the client API for NetworkAddressRegisterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkAddressRegisterServiceClient interface {
	BatchRegister(ctx context.Context, in *NetworkAddresses, opts ...grpc.CallOption) (*NetworkAddressMappings, error)
}

type networkAddressRegisterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkAddressRegisterServiceClient(cc grpc.ClientConnInterface) NetworkAddressRegisterServiceClient {
	return &networkAddressRegisterServiceClient{cc}
}

func (c *networkAddressRegisterServiceClient) BatchRegister(ctx context.Context, in *NetworkAddresses, opts ...grpc.CallOption) (*NetworkAddressMappings, error) {
	out := new(NetworkAddressMappings)
	err := c.cc.Invoke(ctx, "/NetworkAddressRegisterService/batchRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkAddressRegisterServiceServer is the server API for NetworkAddressRegisterService service.
// All implementations should embed UnimplementedNetworkAddressRegisterServiceServer
// for forward compatibility
type NetworkAddressRegisterServiceServer interface {
	BatchRegister(context.Context, *NetworkAddresses) (*NetworkAddressMappings, error)
}

// UnimplementedNetworkAddressRegisterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNetworkAddressRegisterServiceServer struct {
}

func (UnimplementedNetworkAddressRegisterServiceServer) BatchRegister(context.Context, *NetworkAddresses) (*NetworkAddressMappings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRegister not implemented")
}

// UnsafeNetworkAddressRegisterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkAddressRegisterServiceServer will
// result in compilation errors.
type UnsafeNetworkAddressRegisterServiceServer interface {
	mustEmbedUnimplementedNetworkAddressRegisterServiceServer()
}

func RegisterNetworkAddressRegisterServiceServer(s grpc.ServiceRegistrar, srv NetworkAddressRegisterServiceServer) {
	s.RegisterService(&NetworkAddressRegisterService_ServiceDesc, srv)
}

func _NetworkAddressRegisterService_BatchRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkAddresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAddressRegisterServiceServer).BatchRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NetworkAddressRegisterService/batchRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAddressRegisterServiceServer).BatchRegister(ctx, req.(*NetworkAddresses))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkAddressRegisterService_ServiceDesc is the grpc.ServiceDesc for NetworkAddressRegisterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkAddressRegisterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NetworkAddressRegisterService",
	HandlerType: (*NetworkAddressRegisterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "batchRegister",
			Handler:    _NetworkAddressRegisterService_BatchRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "language-agent/NetworkAddressRegisterService.proto",
}
